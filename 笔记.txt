# Day1
C++数据类型：
基本类型：
short int	2bit 短整型
int	4bit 整型
unsigned int 4bit	无符号整型
long int 4bit 长整型
char 1bit 字符型
float 4bit 单精度型
double 8bit 双精度型
long double 8bit 长双精度型
bool 1/8bit 布尔型（因为布尔只有一位二进制数，一个字节由8位二进制数组成，所以我猜是1/8）
void 0bit 空
非基本类型：
enum 枚举
type[ ] 数组
struct 结构体
union 共同体
class  类
type * ？？？
指针类型

#Day2
	/*如果你的数组在运行过程中可以确定，
	比如你输入一个整数来确定数组长度，
	这样的话可以通过动态内存分配实现。*/
  eg：
  int a;
  char string1;
  cin>>a;
  string1=new char[];
  cin string1;
	//cout << &b << endl << b[2] << endl << *b << endl;
	//     输出地址            内容     指针指向的第一个字符
eg：
字符串abcdf
地址 c a
  
  #Day3
  Day3
malloc()全称是memory allocation，中文叫动态内存分配，
用于申请一块连续的指定大小的内存块区域以void*类型返回分
配的内存区域地址，当无法知道内存具体位置的时候，想要绑定
真正的内存空间，就需要用到动态的分配内存。括号里是分配的
动态空间的大小（单位字节？）使用完后应用free()释放内存空
间。(stdlib.h)
char *arraya(char *p)
{
   char *pt;
   if
gets()从标准输入设备读字符串函数，其可以无限读取，不会判
断上限，以回车结束读取，所以程序员应该确保buffer的空间足
够大，以便在执行读操作时不发生溢出。

#Day4
  如果出现问题，一定要检查函数名是否一致，声明，定义，使用三
者必须保持一致。

#Day5
  ofstream: 写操作（输出）的文件类 (由ostream引申而来)
  ifstream: 读操作（输入）的文件类(由istream引申而来)
  fstream: 可同时读写操作的文件类 (由iostream引申而来)

#Day6
iosstream	定义读写控制窗口的类型；
fstream	定义读写已命名文件的类型；
sstream	多定义的类型则用于读写存储在内存中的string对象。

istringstream：由istream派生而来，提供读string的功能
ostringstream：由ostream派生而来，提供写string的功能
stringstream：由iostream派生而来，提供读写string的功能

1.getline();按行读取遇回车'\n'停止
2.istringstream sin(string);遇空格'\t'停止
 sin>>

#Day9
链表是一种常见的数据结构，它是一种物理存储单元上非连续、
非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针
链接次序实现的。链表由一系列结点（链表中每一个元素称为
结点）组成，结点可以在运行时动态生成。
每个结点包括两个部分：一个是存储数据元素的数据域，另一
个是存储下一个结点地址的指针域。

#Day15
虚函数
virtual 关键字只用在类定义里的函数生命中，写函数体不用。
构造函数和静态成员函数不能是虚函数

多态
表现形式一
派生类的指针可以赋给基类指针
通过基类指针调用基类和派生类中的同名虚函数时：
（1）若该指针指向一个基类的对象，那么被调用的时基类的虚
函数；
（2）若该指针指向一个派生类的对象，那么被调用的是派生类
的虚函数。
这种机制就叫做“多态”。
表现形式二
派生类的对象可以赋给基类引用
通过基类引用调用基类和派生类中的同名虚函数时：
（1）若该引用引用的是一个基类对象，那么调用的是基类的虚函数；
（2）若该引用引用的是一个派生类的对象，那么被调用的是派生类的
虚函数。
class CBase{
	public:
	virtual void SomeVirtualFunction(){}
};
class CDerived:public CBase{
	public:
	virtual void SomeVirtualFunction(){}
};
int main(){
	CDervied ODervied;
	CBase &r=ODervied;//引用的是派生类的对象；
	r.SomeVirtualFunction();//调用哪个虚函数取决于r引用哪种类型的对象
	return 0;
};
在面向对象的程序设计中使用多态，能够增强程序的可扩充性，即程序需要修
改或增加功能的时候，需要改动和增加的代码较少。